------------
1. Расписать в текстовом документе зачем нужны интерфейсы и их отличие от классов.
------------

Интерфейс создается с помощью ключевого слова “Interface” и представляет собой чистую абстракцию, содержит в себе сигнатуры методов. (В отличии от класса, который может содержать в себе не только абстракции, но 
и конткретные методы с реализацией).
Интерфейс может определять события, методы, индексаторы, свойства.
С помощью интерфейса можно реализовать несколько абстракций.
Класс, в свою очередь, может реализовывать неограниченное количество интерфейсов.
Благодаря интерфейсам класс может быть унаследован от одного базового класса и одновременно использовать необходимую ему логику, определённую внутри интерфейса или интерфейсов, которых может ьыть множество.
Интерфейс может использоваться любым классом или структурой, в рамках любого пространства имён
или сборки, написанной на языке .NET, а т.к. интерфейс, является набором абстрактных членов, ему можно определить любое поведение, которое можно определить в абстрактном классе.
Каждый тип, производный от абстрактного класса должен предоставлять реализацию для каждого члена родительского класса. Поэтому, всё необходимое поведение можно определить в нескольких интерфейсах, и впоследствии использовать для каждого отдельного класса необходимый конкретно ему интерфейс, избегая реализации ненужной логики.

------------
2. Расписать в текстовом документе зачем нужны обобщение и привести несколько примеров их использования.
------------
Обобщения - это специальные конструкции, описанные таким образом, что и их можно использовать с различными типами данных, не меняя описание. 
Обобщения помогают сократить и упростить процесс написания кода. 
Используя обобщения, не придётся создавать несколько разных классов с одинаковой реализацией, отличающихся лишь типом обрабатываемых данных. 
Обобщения обеспечивают лучшую производительность, т.к. обходят проблему упаковки(boxing) и распаковки(unboxing), связанную с обработкой кода средой CLR и приведением к типу object. 
Обощения значительно сокращают потребность в специальных типах коллекций, поскольку при создании коллекции указывается вид типа.
Обобщения безопасны по отношению к типам, потому что могут содержать только объекты указанного типа, что исключает ошибки, связанные с различием данных.

Примеры использования обощений: 
- Сохранение игры 
При создании сохранения игре приходится обрабатывать большое количество различных типов данных, например положение объектов в пространстве(Vector3), показатели здоровья, количество боеприпасов и т.д. у различных персонажей (int или float). В таком случае, создание отдельных классов для каждого типа данных можно обойти, используя обобщения, которые будут работать одинаково для всех типов.

-Работа с разными типами данных 
В качестве параметров обобщения можно указывать несколько различных типов данных. Это может пригодиться если, напрмер, игрок получает ранение, и кровотечние будет влиять как на здоровье, так и на стамину. 
